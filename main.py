import asyncio
from mcrcon import MCRcon
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command as cmd
import json
from functions import *

config = json.load(open("config.json"))

token = config["token"] # –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ Telegram-–±–æ—Ç–∞

check_empty_users()

host = config["host"] # IP –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ –ø–æ—Ä—Ç–∞)
port = config["port"] # –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
password = config["password"] # –ü–∞—Ä–æ–ª—å Rcon

bot = Bot(token=token)
dp = Dispatcher()

@dp.message(cmd("register"))
async def register_user(message: types.message):
    meta = message.text.split()[1:]
    if len(meta) < 2: return await message.reply("‚ùóÔ∏è–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: */register <tgid> <group>*", parse_mode="Markdown")

    tgid = int(meta[0])
    level = meta[1]

    data = check_user_in_db(message.from_user.id, "data.db")[1]
    groups = json.load(open("groups.json"))
    data_weight = groups[data]["weight"] if data != "super" else 10 ** 5
    groups_list = list(groups.keys())
    if data not in groups_list and data != "super":
        return await message.reply("‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É.*", parse_mode="Markdown")

    if tgid == message.from_user.id: return message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –Ω–∞ —Å–µ–±–µ!*", parse_mode="Markdown")

    if  data == "super" or message.text.split()[0][1:] in groups[data]["allowed_super_commands"]:
        if check_user_in_db(tgid, "data.db"):
            return await message.reply("‚ö†Ô∏è *–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.*", parse_mode="Markdown")
        if level not in groups_list:
            return await message.reply("‚ùå *–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*", parse_mode="Markdown")
        if data_weight <= groups[level]["weight"] or level == "super":
            return await message.reply("‚ö†Ô∏è *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–æ–π –≥—Ä—É–ø–ø–æ–π!*", parse_mode="Markdown")
        register(tgid, level, "data.db")
        await message.reply(f"‚úÖ *–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è TG-{tgid} —Å –≥—Ä—É–ø–ø–æ–π {level.upper()}!*", parse_mode="Markdown")
    else:
        return await message.reply("‚ö†Ô∏è *–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –í–∞–º –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞.*", parse_mode="Markdown")

@dp.message(cmd("unregister"))
async def unregister_user(message: types.message):
    meta = message.text.split()[1:]
    if len(meta) < 1: return await message.reply("‚ùóÔ∏è*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unregister <tgid>*", parse_mode="Markdown")

    tgid = int(meta[0])

    data = check_user_in_db(message.from_user.id)[1]
    data2 = check_user_in_db(tgid)[1]
    groups = json.load(open("groups.json"))
    groups_list = list(groups.keys())
    data_weight = groups[data]["weight"] if data != "super" else 10**5
    data_weight2 = groups[data]["weight"] if data2 in groups_list else 0
    if data not in groups_list and data != "super":
        return await message.reply("‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É.*", parse_mode="Markdown")

    if tgid == message.from_user.id: return message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –Ω–∞ —Å–µ–±–µ!*", parse_mode="Markdown")

    if  data == "super" or message.text.split()[0][1:] in groups[data]["allowed_super_commands"]:
        if not check_user_in_db(tgid):
            return await message.reply("‚ö†Ô∏è *–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.*", parse_mode="Markdown")
        if data2 == "super" or data_weight <= data_weight2:
            return await message.reply("‚ö†Ô∏è *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!*", parse_mode="Markdown")
        unregister(tgid)
        await message.reply(f"‚úÖ *–í—ã —É–¥–∞–ª–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è TG-{tgid}!*", parse_mode="Markdown")
    else:
        return await message.reply("‚ö†Ô∏è *–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –í–∞–º –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞.*", parse_mode="Markdown")

@dp.message(cmd("group"))
async def setGroup_user(message: types.message):
    meta = message.text.split()[1:]
    if len(meta) < 2: return await message.reply("‚ùóÔ∏è*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /group <tgid> <group>*", parse_mode="Markdown")

    tgid = int(meta[0])
    level = meta[1]

    data = check_user_in_db(message.from_user.id)[1]
    data2 = check_user_in_db(tgid)[1]
    groups = json.load(open("groups.json"))
    groups_list = list(groups.keys())
    data_weight = groups[data]["weight"] if data != "super" else 10 ** 5
    if data not in groups_list and data != "super":
        return await message.reply("‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É.*", parse_mode="Markdown")

    if tgid == message.from_user.id: return message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –Ω–∞ —Å–µ–±–µ!*", parse_mode="Markdown")

    if data == "super" or message.text.split()[0][1:] in groups[data]["allowed_super_commands"]:
        if not check_user_in_db(tgid):
            return await message.reply("‚ö†Ô∏è *–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.*", parse_mode="Markdown")
        if level not in groups_list:
            return await message.reply("‚ùå *–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*", parse_mode="Markdown")
        if data2 == "super" or groups[level]["weight"] >= data_weight:
            return await message.reply("‚ö†Ô∏è *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —ç—Ç—É –≥—Ä—É–ø–ø—É!*", parse_mode="Markdown")
        set_group(tgid, level)
        await message.reply(f"‚úÖ *–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é TG-{tgid} –≥—Ä—É–ø–ø—É {level.upper()}!*", parse_mode="Markdown")
    else:
        return await message.reply("‚ö†Ô∏è *–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –í–∞–º –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞.*", parse_mode="Markdown")

@dp.message(cmd("profile"))
async def check_profile(message: types.message):
    if not check_user_in_db(message.from_user.id): return
    msg = "üî• *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n"
    msg += f"–ì—Ä—É–ø–ø–∞: `{check_user_in_db(message.from_user.id)[1]}`\n\n"
    msg += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"

    group = check_user_in_db(message.from_user.id)[1]

    if group != "super":
        groups = json.load(open("groups.json"))
        allowed_commands = groups[group]["allowed_commands"]
    else:
        allowed_commands = ['*']
    for i in allowed_commands:
        msg += f"‚Äî {i}\n".replace("*", "\\*")

    await message.reply(msg, parse_mode="Markdown")

@dp.message()
async def rconCommand(message: types.message):
    if message.text[:2].lower() != "r ": return await message.reply(f"‚ö†Ô∏è *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!*", parse_mode="Markdown")

    tgid = message.from_user.id
    data = check_user_in_db(tgid)

    if not data: return await message.reply(f"‚ùå *–í–∞–º –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã*!", parse_mode="Markdown")

    try:
        with MCRcon(host, password, port) as mcr:
            command = message.text[2:]

            if is_command_allowed(command, tgid, "data.db") == Exception:
                return await message.reply("‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É.*", parse_mode="Markdown")
            elif not is_command_allowed(command, tgid, "data.db"):
                return await message.reply("‚ö†Ô∏è *–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –í–∞–º –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞.*", parse_mode="Markdown")

            response = mcr.command(command)

            formatted_resp = remove_minecraft_color_codes(response)
            await message.reply(f"‚úâÔ∏è –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n\n{formatted_resp.strip('\n')}")
    except Exception as e:
        print(e)
        return await message.reply("‚ö†Ô∏è *Rcon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!*", parse_mode="Markdown")

async def main():
    print("–ö–ª–∏–µ–Ω—Ç Rcon –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
